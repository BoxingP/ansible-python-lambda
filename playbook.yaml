- name: get hosts facts
  hosts: all
  gather_facts: yes

- name: deploy lambda function
  hosts: localhost
  gather_facts: no
  vars:
    lambda_function_directory: workspace
    zip_name: '{{ lambda_function_name }}.zip'
    email_address: creator@example.com
    virtualenv: '{{ hostvars[inventory_hostname].ansible_env.HOME }}/.virtualenvs/ansible-lambda-python-env'
  vars_files:
    - vars/aws_configuration.yaml
    - vars/aws_credentials.yaml
    - vars/aws_lambda_functions.yaml
  tasks:
    - name: init server environment
      block:
        - include_role:
            name: 'update_{{ ansible_distribution|lower }}_environment'
        - include_role:
            name: create_python_virtualenv
        - include_tasks: tasks/init_workspace.yaml
          vars:
            workspace_directory: '{{ lambda_function_directory }}'
        - include_role:
            name: build_zip_file
          vars:
            files_need_to_zip_directory: '{{ lambda_function_directory }}'
    - name: build aws environment
      block:
        - name: load aws tags needed to add when creating resources
          include_vars:
            file: vars/resource_tags.yaml
            name: aws_resource_tags
        - include_role:
            name: create_s3_bucket
          vars:
            s3_tags: '{{ aws_resource_tags }}'
        - include_role:
            name: upload_file_to_s3
        - include_role:
            name: get_s3_object_version_id
        - name: load cloudformation template parameters
          include_vars:
            file: vars/lambda_function_stack_template_parameters.yaml
            name: cloudformation_template_parameters
        - include_role:
            name: create_cloudformation_stack
          vars:
            cloudformation_stack_name: "{{ lambda_function_name | replace('_','-') }}"
            cloudformation_template: vars/lambda_function_stack.yaml
            cloudformation_tags: '{{ aws_resource_tags }}'
      vars:
        ansible_python_interpreter: '{{ virtualenv }}/bin/python3'
      environment:
        AWS_ACCESS_KEY_ID: '{{ dscops.aws_access_key_id }}'
        AWS_SECRET_ACCESS_KEY: '{{ dscops.aws_secret_access_key }}'
        PATH: '{{ virtualenv }}/bin:{{ hostvars[inventory_hostname].ansible_env.PATH }}'
