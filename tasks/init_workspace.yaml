- name: remove exist {{ workspace_directory }} directory
  include_role:
    name: remove_file
  vars:
    file_to_remove: '{{ workspace_directory }}'

- name: create {{ workspace_directory }} directory
  file:
    path: '{{ workspace_directory }}'
    state: directory

- name: get absolute path of {{ workspace_directory }}
  include_role:
    name: get_absolute_path_of_directory
  vars:
    directory: '{{ workspace_directory }}'

- name: git checkout codes
  include_role:
    name: git_checkout
  vars:
    git_checkout_directory: "{{vars[ 'abs_' + workspace_directory + '_path' ]}}"

- name: copy in condition
  synchronize:
    src: 'files/{{ item }}'
    dest: "{{vars[ 'abs_' + workspace_directory + '_path' ]}}/{{ item | replace( lambda_function_name + '_','') }}"
    delete: yes
  with_items:
    [ '{{ lambda_function_name }}_tags_filter.yaml', '{{ lambda_function_name }}_policy.py' ]

- name: setup.cfg for no prefix
  copy:
    dest: "{{vars[ 'abs_' + workspace_directory + '_path' ]}}/setup.cfg"
    content: |
      [install]
      prefix=

- name: check for requirements.txt
  changed_when: false
  stat:
    path: "{{vars[ 'abs_' + workspace_directory + '_path' ]}}/requirements.txt"
  register: requirements_result

- name: install dependencies
  when: requirements_result.stat.exists
  pip:
    chdir: "{{vars[ 'abs_' + workspace_directory + '_path' ]}}"
    extra_args: '-t .'
    requirements: requirements.txt

- name: erase .pyc files
  command: find . -type f -name "*.py[co]" -delete
  args:
    chdir: "{{vars[ 'abs_' + workspace_directory + '_path' ]}}"
